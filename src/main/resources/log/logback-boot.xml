<?xml version="1.0" encoding="UTF-8"?>
<configuration status="warn" >

    <!-- appender是configuration的子节点,是负责写日志的组件 -->
    <!-- ConsoleAppender把日志输出到控制台 -->
    <!--    <property name="CONSOLE_LOG_PATTERN" -->
    <!--               value="%date{yyyy-MM-dd HH:mm:ss} | %highlight(%-5level) | %boldYellow(%thread) | %boldGreen(%logger) | %msg%n"/> -->
    <!-- IDEA 中打印彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>
    <conversionRule conversionWord="wex"
                    converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>

    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <!--
                 %m输出的信息, %n换行输出 %p日志级别, %t线程名, %d日期, %c类的全名, %i索引

                %clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint}   时间
                %clr(${LOG_LEVEL_PATTERN:-%5p})            日志类型  INFO DEBUG WARN
                %clr([%15.15t]){faint}                     进程名
                %clr(%-40.40logger{39}){cyan}              日志输出类
                %clr(%4.4L){cyan}                          日志输所在类的行号
                %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx} 具体日志内容

                {faint} 表示日志颜色，  faint 白色  red 红色  yellow 黄色 详情参考 org.springframework.boot.logging.logback.ColorConverter

                springboot 默认日志格式为
                    %d{yyyy-MM-dd HH:mm:ss.SSS} -%5p ${PID:-} [%15.15t] %-40.40logger{39} : %m%n
            -->
            <pattern>%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:-}){cyan} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(%4.4L){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}</pattern>
            <charset>UTF-8</charset>
        </encoder>

    </appender>

    <!-- RollingFileAppender:滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 -->
    <!-- 1.先按日期存日志，日期变了，将前一天的日志文件名重命名为xxx%日期%索引，新的日志仍然是sys.log -->
    <!-- 2.如果日期没有变化，但是当前日志文件的大小超过1kb时，对当前日志进行分割 重名名 -->
    <appender name="syslog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${LOG_PATH}/${LOG_FILE}.log</File>
        <!-- rollingPolicy:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。 -->
        <!-- TimeBasedRollingPolicy： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 活动文件的名字会根据fileNamePattern的值，每隔一段时间改变一次 -->
            <!-- 文件名：log/sys.2018-12-05.0.log -->
            <fileNamePattern>${LOG_PATH}/record/${LOG_FILE}.%d.%i.log</fileNamePattern>
            <!-- 每产生一个日志文件，该日志文件的保存期限为30天 -->
            <maxHistory>5</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- maxFileSize:这是活动文件的大小，默认值是10MB,只是为了演示 -->
                <maxFileSize>300MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <!-- pattern节点，用来设置日志的输入格式 -->
            <pattern>
                <!--%d %p (%file:%line\)- %m%n-->
                %d{yyyy-MM-dd HH:mm:ss.SSS} -%5p [%15.15t] %-40.40logger{39} : %m%n
            </pattern>
            <!-- 记录日志的编码 -->
            <charset>UTF-8</charset> <!-- 此处设置字符集 -->
        </encoder>
    </appender>

    <!-- mongoDB输出设置,此处是定义 -->
<!--    <appender name="MONGO" class="cn.dd.core.config.MongoDBAppender">
        <host>localhost</host>
        <port>27017</port>
        &lt;!&ndash; <username>lzw</username> &ndash;&gt;
        &lt;!&ndash; <password>123</password> &ndash;&gt;
        <dbName>logs</dbName>
        <collectionName>logs_request</collectionName>
        <source>${CONTEXT_NAME}</source>
        <exceptionFilter class="ch.qos.logback.classic.exceptionFilter.ThresholdFilter">
            <level>INFO</level>
        </exceptionFilter>
    </appender>-->


    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->
    <!-- 控制台日志输出级别 -->
    <root level="INFO">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="syslog"/>
        <!--<appender-ref ref="MONGO"/>-->
    </root>


</configuration>